{"version":3,"sources":["components/board-list.jsx","components/list-board-view.jsx","components/board.js","components/detail-board-view.jsx","components/add-board-view.jsx","App.js","serviceWorker.js","index.js"],"names":["BoardRow","board","rows","columns","mines","finished","className","moment","created","format","modified","to","id","BoardList","boards","map","key","ListBoardView","useState","boardList","setBoardList","useFetch","cachePolicy","get","response","loading","error","useEffect","a","ok","loadBoardList","Table","Styled","table","TR","tr","TD","td","props","isNaN","parseInt","value","BoardCell","boardCell","rowPos","colPos","onReveal","onMark","onClick","event","preventDefault","ctrlKey","boardRow","index","Board","isWonBoard","display_board","row","DetailBoardView","boardId","useParams","history","useHistory","url","setBoard","put","del","cache","loadBoard","column","console","log","operation","updatedBoard","delete","onDelete","window","confirm","replace","Fragment","style","visibility","schema","yup","shape","transform","undefined","required","integer","min","max","test","this","parent","AddBoardView","post","useForm","resolver","yupResolver","register","handleSubmit","formErrors","errors","createBoard","data","push","alert","onSubmit","htmlFor","type","name","aria-describedby","defaultValue","ref","message","App","href","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1ec4442f.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport {Link} from \"react-router-dom\";\n\n\nconst BoardRow = ({board}) =>\n    <tr>\n        <td>{board.rows}</td>\n        <td>{board.columns}</td>\n        <td>{board.mines}</td>\n        <td>{board.finished && <i className=\"fa fa-check\"></i>}</td>\n        <td>{moment(board.created).format(\"MM/DD/YYYY HH:mm:ss\")}</td>\n        <td>{moment(board.modified).format(\"MM/DD/YYYY HH:mm:ss\")}</td>\n        <td>\n            <Link to={`/${board.id}`} className=\"btn btn-info\">View board</Link>\n        </td>\n    </tr>\nBoardRow.propTypes = {\n    board: PropTypes.object.isRequired\n}\n\n\nexport const BoardList = ({boards}) => {\n    boards = boards || []\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th>Rows</th>\n                    <th>Columns</th>\n                    <th>Mines</th>\n                    <th>Finshed</th>\n                    <th>Created</th>\n                    <th>Last modified</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {boards.map(board => <BoardRow key={board.id} board={board} />)}\n            </tbody>\n        </table>\n    )\n}\nBoardList.propTypes = {\n    boards: PropTypes.array.isRequired\n}\n","import React, { useEffect, useState } from 'react'\nimport { Link } from \"react-router-dom\";\nimport {BoardList} from './board-list'\nimport useFetch from 'use-http'\n\n\nexport const ListBoardView = () => {\n    const [boardList, setBoardList] = useState([])\n\n    const { get, response, loading, error } = useFetch('/api/v1/boards/', {cachePolicy: 'no-cache'})\n\n    useEffect(() =>{\n        async function loadBoardList() {\n            const boardList = await get(\"\")\n            if (response.ok) {\n                setBoardList(boardList)\n            }\n        }\n        loadBoardList() \n    }, [])\n\n    return (\n        <div className=\"container-fluid\">\n            <h3>\n                Created boards {' '}\n                <Link to={`/new`} className=\"btn btn-primary\">New board</Link>\n            </h3>\n            {error && 'Error loading boards!'}\n            {loading && 'Loading boards...'}\n            <BoardList boards={boardList} />\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Styled from 'styled-components'\n\n\nconst EMPTY = 0\nconst BOMB = 1\nconst FLAG = 2\nconst QUESTION = 4\nconst REVEALED = 8\nconst KABOOM = 16\n\n\nconst Table = Styled.table`\n    background-color: #eeeeee;\n`\n\nconst TR = Styled.tr`\n    background-color: #eeeeee;\n    `\n\nconst TD = Styled.td`\n    background-color: ${props => isNaN(parseInt(props.value)) ? '#aaaaaa;' : '#cccccc;'} \n    border: 1px solid #eeeeee;\n    width: 32px;\n    height: 32px;\n    font-size: 24px;\n    padding: 2px;\n    vertical-align: middle;\n    text-align: center;\n    line-height: 1;\n    cursor: pointer;\n\n    &:hover {\n        cursor: pointer;\n    }\n\n`\n\n\nconst BoardCell = ({boardCell, rowPos, colPos, onReveal, onMark}) => {\n    const onClick = (event) => {\n        event.preventDefault();\n        if (event.ctrlKey) {\n            onMark(rowPos, colPos)\n        }\n        else {\n            onReveal(rowPos, colPos)\n        }\n    }\n    return (\n        <TD onClick={onClick} value={boardCell}>\n            {boardCell === '!' && <i className=\"fa fa-flag\"></i>}\n            {boardCell === '?' && <i className=\"fa fa-question\"></i>}\n            {boardCell === '*' && <i className=\"fa fa-bomb\"></i>}\n            {boardCell === '**' && <i className=\"fa fa-bomb text-danger\"></i>}\n            {boardCell === ' ' && ' '}\n            {parseInt(boardCell) > 0 && boardCell}\n        </TD>\n    )\n}\nBoardCell.propTypes = {\n    boardCell: PropTypes.string.isRequired,\n    rowPos: PropTypes.number.isRequired,\n    colPos: PropTypes.number.isRequired,\n    onReveal: PropTypes.func.isRequired,\n    onMark: PropTypes.func.isRequired\n}\n\nconst BoardRow = ({boardRow, rowPos, onReveal, onMark}) => \n    <TR>\n        {boardRow.map((boardCell, index) =>\n            <BoardCell key={index} rowPos={rowPos} colPos={index} boardCell={boardCell} onReveal={onReveal} onMark={onMark} />\n        )}\n    </TR>\nBoardRow.propTypes = {\n    boardRow: PropTypes.array.isRequired,\n    rowPos: PropTypes.number.isRequired,\n    onReveal: PropTypes.func.isRequired,\n    onMark: PropTypes.func.isRequired\n}\n\nexport const Board = ({board, onReveal, onMark}) => {\n    return (\n        <Table>\n            <tbody>\n                {board.map((boardRow, index) =>\n                    <BoardRow key={index} rowPos={index} boardRow={boardRow} onReveal={onReveal} onMark={onMark} />\n                )}\n            </tbody>\n        </Table>\n    )\n}\nBoard.propTypes = {\n    board: PropTypes.array.isRequired,\n    onReveal: PropTypes.func.isRequired,\n    onMark: PropTypes.func.isRequired\n}\n","import React, { useState, useEffect } from 'react'\nimport useFetch from 'use-http'\nimport {\n    useParams,\n    useHistory,\n    Link,\n} from \"react-router-dom\"\nimport {Board} from './board'\n\n\nconst isWonBoard = (board) => {\n    if (board.finished) {\n        for (const row of board.display_board) {\n            for (const value of row) {\n                if (value === '**')\n                    return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\n\n\nexport const DetailBoardView = () => {\n    const {boardId} = useParams()\n    const history = useHistory()\n    const url = `/api/v1/boards/${boardId}/`\n    const [board, setBoard] = useState(null);\n    const { get, put, del, response, loading, error, cache } = useFetch('', {cachePolicy: 'no-cache'})\n\n    useEffect(() => {\n        async function loadBoard() {\n            const board = await get(url)\n            if (response.ok) {\n                setBoard(board)\n            }\n        }\n        loadBoard() \n    }, [boardId])\n\n    const onReveal = async (row, column) => {\n        if (board && board.finished)\n            return\n        if (loading) {\n            console.log(\"Cannot reveal the cell: pending operation.\")\n            return\n        }\n        const updatedBoard = await put(url, {row, column, operation: 'reveal_cell'})\n        if (response.ok) {\n            setBoard(updatedBoard)\n            await cache.delete()\n        }\n    }\n\n    const onMark = async (row, column) => {\n        if (board && board.finished)\n            return\n        if (loading) {\n            console.log(\"Cannot mark the cell: pending operation.\")\n            return\n        }\n        const updatedBoard = await put(url, {row, column, operation: 'mark_cell'})\n        if (response.ok) {\n            setBoard(updatedBoard)\n            await cache.delete()\n        }\n    }\n\n    const onDelete = async () => {\n        if (loading) {\n            console.log(\"Cannot delete the board: pending operation.\")\n            return\n        }\n        if (window.confirm(\"Do you want to delete this board?\")) {\n            await del(url)\n            if (response.ok) {\n                history.replace(\"/\")\n            }\n        }\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h3>\n                Minesweeper Board\n            </h3>\n            {board && !board.finished && \n            <React.Fragment>\n                <div>\n                    <span className=\"badge badge-info\">Click</span> to reveal a cell\n                </div>\n                <div>\n                    <span className=\"badge badge-info\">Ctrl + Click</span> to mark a cell\n                </div>\n            </React.Fragment>\n            }\n            {board && board.finished && isWonBoard(board) &&\n            <div>\n                <span className=\"badge badge-info text-uppercase\">You won!!!</span>\n            </div>\n            }\n            {board && board.finished && !isWonBoard(board) &&\n            <div>\n                <span className=\"badge badge-danger text-uppercase\">You lost</span>\n            </div>\n            }\n            \n            <div>\n                <span style={{visibility: 'hidden'}}>Status: </span>\n                {error && 'Error loading boards!'}\n                {loading && 'Loading boards...'}\n            </div>\n            {board && <Board board={board.display_board} onReveal={onReveal} onMark={onMark} />}\n\n            <div className=\"mt-3\">\n                <Link to=\"/\" className=\"btn btn-primary\">Return</Link>{' '}\n                <button className=\"btn btn-danger\" onClick={onDelete}>Delete this board</button>\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport useFetch from 'use-http'\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\n\n\nconst schema = yup.object().shape({\n    rows: yup.number()\n        .transform(value => (isNaN(value) ? undefined : value))\n        .required(\"You must write the number or rows\")\n        .integer().min(10).max(30),\n    columns: yup.number()\n        .transform(value => (isNaN(value) ? undefined : value))\n        .required(\"You must write the number of columns\")\n        .integer().min(10).max(30),\n    mines: yup.number()\n        .transform(value => (isNaN(value) ? undefined : value))\n        .required(\"You must write the number of mines\")\n        .integer().min(14)\n        .test('minesOverflow',\n            \"The number of mines cannot be greater than the amount of cells\",\n            function(value) {\n                return value <= this.parent.rows * this.parent.columns\n            }\n        )\n});\n\n\nexport const AddBoardView = () => {\n    const { post, response, loading, error } = useFetch('/api/v1/boards/', {cachePolicy: 'no-cache'})\n    const history = useHistory()\n\n    const { register, handleSubmit, errors:formErrors } = useForm({\n        resolver: yupResolver(schema)\n    })\n\n    const createBoard = async (data) => {\n        const board = await post(\"\", data)\n        if (response.ok) {\n            history.push(`/${board.id}`)\n        }\n        else if (error) {\n            alert(\"Error creating a board.\")\n        }\n    }\n\n    const onSubmit = data => {\n        if (data === undefined || loading)\n            return\n        createBoard(data)\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h3>New board</h3>\n            {error && 'Error loading boards!'}\n            {loading && 'Creating board...'}\n            \n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"inputRowCount\" className=\"font-weight-bold\">Row count:</label>\n                    <input type=\"number\" name=\"rows\" className={`form-control ${formErrors.rows && 'is-invalid'}`} id=\"inputRowCount\" aria-describedby=\"rowCountHelp\"\n                        defaultValue={10} ref={register({ required: true })} />\n                    {!formErrors.rows && <small id=\"rowCountHelp\" className=\"form-text text-muted\">Count of rows (between 10 and 30).</small>}\n                    {formErrors.rows && <div className=\"invalid-feedback\">{formErrors.rows?.message}</div>}\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"inputColumnCount\" className=\"font-weight-bold\">Column count:</label>\n                    <input type=\"number\" name=\"columns\" className={`form-control ${formErrors.columns && 'is-invalid'}`} id=\"inputColumnCount\" aria-describedby=\"columnCountHelp\"\n                        defaultValue={10} ref={register} />\n                    {!formErrors.columns && <small id=\"columnCountHelp\" className=\"form-text text-muted\">Count of columns (between 10 and 30).</small>}\n                    {formErrors.columns && <div className=\"invalid-feedback\">{formErrors.columns?.message}</div>}\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"inputMinesCount\" className=\"font-weight-bold\">Mines count:</label>\n                    <input type=\"number\" name=\"mines\" className={`form-control ${formErrors.mines && 'is-invalid'}`} id=\"inputMinesCount\" aria-describedby=\"minesCountHelp\"\n                        defaultValue={14} ref={register} />\n                    {!formErrors.mines && <small id=\"minesCountHelp\" className=\"form-text text-muted\">Count of mines.</small>}\n                    {formErrors.mines && <div className=\"invalid-feedback\">{formErrors.mines?.message}</div>}\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary\">Create</button>{' '}\n                <Link to=\"/\" className=\"btn btn-secondary\">Cancel</Link>\n            </form>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\n\nimport {ListBoardView} from './components/list-board-view'\nimport {DetailBoardView} from './components/detail-board-view'\nimport {AddBoardView} from './components/add-board-view'\n\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <div className=\"container-fluid\">\n                <h1>MineSweeper <a href=\"/accounts/logout\" className=\"btn btn-link\">Logout</a></h1>\n            </div>\n            <Router>\n                <Switch>\n                    <Route path=\"/new\">\n                        <AddBoardView />\n                    </Route>\n                    <Route path=\"/:boardId\">\n                        <DetailBoardView />\n                    </Route>\n                    <Route path=\"/\">\n                        <ListBoardView />\n                    </Route>\n                </Switch>\n            </Router>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}